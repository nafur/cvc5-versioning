name: Add binary to release
description: Add cvc5 binary to the current release
inputs:
  binary:
    description: file name of binary
  release-binary-name:
    description: name of binary in release
  github-token:
    description: token to upload binary
runs:
  using: composite
  steps:
    - name: Rename binaries for release
      shell: bash
      run: |
        cp ${{ inputs.binary }} ${{ inputs.release-binary-name }}

    - name: install pyGithub
      shell: bash
      run: |
        pip install pyGithub

    - name: store to latest
      if: github.ref == 'refs/heads/master'
      shell: python
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        BINARY: ${{ inputs.release-binary-name }}
      run: |
        import datetime
        import os
        from github import Github

        sha = os.getenv('GITHUB_SHA')

        gh = Github(os.getenv('GITHUB_TOKEN'))
        repo = gh.get_repo(os.getenv('GITHUB_REPOSITORY'))
        
        try:
          # update "latest" to current commit
          repo.get_git_ref('tags/latest').edit(sha)
        except:
          print('tag `latest` does not exist.')
          exit

        try:
          rel = repo.get_release('latest')
        except:
          rel = repo.create_git_release('latest', 'latest')
        

        for asset in rel.get_assets():
          age = datetime.datetime.now() - asset.created_at
          if age.days > 3:
            print('Remove outdated asset: {}'.format(asset))
            asset.delete_asset()

        binary = os.getenv('BINARY')
        name,ext = os.path.splitext(binary)
        curtime = datetime.datetime.now().strftime('%m%d-%H%M')
        filename = '{}-{}-{}{}'.format(name, curtime, sha[:7], ext)
        rel.upload_asset(binary, name=filename)
 
    - name: store to release
      if: startsWith(github.ref, 'refs/tags/')
      shell: python
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        BINARY: ${{ inputs.release-binary-name }}
      run: |
        import os
        from github import Github

        ref = os.getenv('GITHUB_REF')
        refname = os.getenv('GITHUB_REF_NAME')
        gh = Github(os.getenv('GITHUB_TOKEN'))
        repo = gh.get_repo(os.getenv('GITHUB_REPOSITORY'))
        try:
          rel = repo.get_release(refname)
        except:
          print("New release from " + refname)
          commit = repo.get_git_commit(repo.get_git_ref(ref).object.sha)
          rel = repo.create_git_release(refname, refname, commit.message)
        rel.upload_asset(os.getenv('BINARY'))

